import React, { useState, useEffect } from "react";
import axios from "../../services/axios";
import { jsPDF } from "jspdf";
import "jspdf-autotable";
import "../../slice/Roboto-Regular-normal.js";
import { toast } from "react-toastify";
import { Editor } from "@tinymce/tinymce-react";
import { Loader2, Eye, Check, Trash2, X } from "lucide-react";
function App() {
  const [jobPosts, setJobPosts] = useState([]); // Danh s√°ch b√†i ƒëƒÉng
  const [recruiters, setRecruiters] = useState([]); // Danh s√°ch nh√† tuy·ªÉn d·ª•ng
  const [filteredJobPosts, setFilteredJobPosts] = useState([]); // Danh s√°ch ƒë√£ l·ªçc
  const [statusFilter, setStatusFilter] = useState("all"); // B·ªô l·ªçc tr·∫°ng th√°i
  const [selectedPost, setSelectedPost] = useState(null); // B√†i ƒëƒÉng ƒë∆∞·ª£c ch·ªçn
  const [loading, setLoading] = useState(false); // Tr·∫°ng th√°i loading
  const [users, setUsers] = useState([]);
  // L·ªçc theo tr·∫°ng th√°i
  const handleStatusFilterChange = (status) => {
    setStatusFilter(status);
    if (status === "all") {
      setFilteredJobPosts(jobPosts);
    } else {
      setFilteredJobPosts(jobPosts.filter((post) => post.trangthai === status));
    }
  };

  const fetchUsers = async () => {
    try {
      const response = await axios.get("/nguoidung");
      setUsers(response.data);
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  };

  // Fetch danh s√°ch b√†i ƒëƒÉng
  const fetchJobPosts = async () => {
    setLoading(true);
    try {
      const response = await axios.get("/tintd/admin");
      console.log("üöÄ ~ fetchJobPosts ~ response:", response);
      setJobPosts(response.data);
      setFilteredJobPosts(
        response.data.filter(
          (post) => statusFilter === "all" || post.trangthai === statusFilter
        )
      ); // √Åp d·ª•ng b·ªô l·ªçc
    } catch (error) {
      toast.error("L·ªói t·∫£i danh s√°ch b√†i ƒëƒÉng");
    } finally {
      setLoading(false);
    }
  };

  // Fetch danh s√°ch nh√† tuy·ªÉn d·ª•ng
  const fetchRecruiters = async () => {
    try {
      const response = await axios.get("/nhatd");
      setRecruiters(response.data);
    } catch (error) {
      toast.error("L·ªói t·∫£i danh s√°ch nh√† tuy·ªÉn d·ª•ng");
    }
  };

  // X·ª≠ l√Ω duy·ªát b√†i ƒëƒÉng
  const handleSubmit = async (id) => {
    const post = jobPosts.find((post) => post.id === id);

    try {
      await axios.post("/tintd/duyet", post);
      toast.success("Duy·ªát th√†nh c√¥ng");
      fetchJobPosts(); // T·∫£i l·∫°i danh s√°ch
    } catch (error) {
      toast.error(`L·ªói duy·ªát: ${error.message}`);
    }
  };

  const XoaTinTD = async (id) => {
    try {
      await axios.delete("/tintd", {
        params: {
          id: id,
        },
      });
      toast.success("X√≥a th√†nh c√¥ng");
      fetchJobPosts(); // T·∫£i l·∫°i danh s√°ch
    } catch (error) {
      toast.error(`L·ªói x√≥a: ${error.message}`);
    }
  };

  // Xem chi ti·∫øt b√†i ƒëƒÉng
  const xemChiTiet = (id) => {
    const post = jobPosts.find((post) => {
      return post.id === id;
    });
    console.log("üöÄ ~ xemChiTiet ~ post:", post.noibat);
    setSelectedPost(post);
  };

  // Export danh s√°ch ra PDF
  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.setFont("Roboto-Regular");
    doc.setFontSize(18);
    doc.text("Tin tuy·ªÉn d·ª•ng", 14, 20);
    doc.setFontSize(12);

    const headers = [
      [
        "Ti√™u ƒë·ªÅ",
        "M√¥ t·∫£",
        "M·ª©c l∆∞∆°ng",
        "Ng√†y h·∫øt h·∫°n",
        "Tr·∫°ng th√°i",
        "Nh√† tuy·ªÉn d·ª•ng",
      ],
    ];
    const rows = jobPosts.map((post) => [
      post.tieude,
      post.mota,
      post.mucluong,
      new Date(post.Ngayhethan).toLocaleDateString(),
      post.trangthai,
      recruiters.find((rec) => rec.id === post.MaNTD)?.ten || "N/A",
    ]);

    doc.autoTable({
      head: headers,
      body: rows,
      startY: 30,
      theme: "striped",
      styles: { font: "Roboto-Regular", fontSize: 10, cellPadding: 3 },
      headStyles: {
        fillColor: [22, 160, 133],
        textColor: 255,
        fontSize: 11,
        fontStyle: "bold",
      },
    });

    doc.save("job_posts_list.pdf");
  };
  const closeModal = () => {
    setSelectedPost(null);
  };
  const [rejectModalOpen, setRejectModalOpen] = useState(false);
  const [rejectReason, setRejectReason] = useState("");
  const [selectedPostId, setSelectedPostId] = useState(null);

  const onClose = () => {
    setRejectModalOpen(false); // Close the modal
    setRejectReason(""); // Reset the reason field
  };
  const openRejectModal = (postId) => {
    setSelectedPostId(postId);
    setRejectModalOpen(true);
  };
  const handleSubmittc = async () => {
    if (!selectedPostId) {
      toast.error("Vui l√≤ng ch·ªçn b√†i ƒëƒÉng ƒë·ªÉ t·ª´ ch·ªëi.");
      return;
    }

    const post = jobPosts.find((post) => post.id === selectedPostId);
    console.log("üöÄ ~ handleSubmittc ~ post:", post);

    if (!post) {
      toast.error("Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng.");
      return;
    }

    if (!rejectReason.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi.");
      return;
    }

    try {
      // Send both the post ID and the rejection reason
      await axios.post("/tintd/tuchoi", {
        post: post,
        reason: rejectReason,
      });

      toast.success("T·ª´ ch·ªëi th√†nh c√¥ng!");
      fetchJobPosts(); // Reload the job posts list
      setRejectModalOpen(false); // Close the modal after submission
      setRejectReason(""); // Reset the reason field
    } catch (error) {
      toast.error(
        `L·ªói t·ª´ ch·ªëi: ${error.response?.data?.message || error.message}`
      );
    }
  };

  useEffect(() => {
    fetchRecruiters();
    fetchJobPosts();
    fetchUsers();
  }, []);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold text-center mb-6">
        Qu·∫£n l√Ω tin tuy·ªÉn d·ª•ng
      </h1>
      {/* B·ªô l·ªçc */}
      <div className="flex items-center mb-4">
        <label htmlFor="filterStatus" className="mr-2 font-semibold">
          L·ªçc theo tr·∫°ng th√°i:
        </label>
        <select
          id="filterStatus"
          className="border rounded px-4 py-2"
          onChange={(e) => handleStatusFilterChange(e.target.value)}
        >
          <option value="all">T·∫•t c·∫£</option>
          <option value="ƒê√£ duy·ªát">ƒê√£ duy·ªát</option>
          <option value="Ch·ªù duy·ªát">Ch·ªù duy·ªát</option>
          <option value="ƒê√£ t·ª´ ch·ªëi">ƒê√£ t·ª´ ch·ªëi</option>
          <option value="ƒê√£ h·∫øt h·∫°n">ƒê√£ h·∫øt h·∫°n</option>
        </select>
      </div>
      {/* Export PDF */}
      <div className="text-right mb-4">
        <button
          onClick={exportToPDF}
          className="bg-green-500 text-white px-4 py-2 rounded"
        >
          Export to PDF
        </button>
      </div>
      {/* B·∫£ng danh s√°ch b√†i ƒëƒÉng */}
      <div className="overflow-x-auto">
        {loading ? (
          <div className="text-center">ƒêang t·∫£i d·ªØ li·ªáu...</div>
        ) : (
          <table className="min-w-full bg-white border rounded-lg mt-6 shadow-md">
            <thead>
              <tr className="border-b bg-gray-100">
                <th className="px-4 py-2 w-1/5 text-left">Ng∆∞·ªùi ƒëƒÉng</th>
                <th className="px-4 py-2 w-1/5 text-left">Ti√™u ƒë·ªÅ</th>
                <th className="px-4 py-2 w-1/5 text-left">Nh√† tuy·ªÉn d·ª•ng</th>
                <th className="px-4 py-2 w-1/10 text-center">Tr·∫°ng th√°i</th>
                <th className="px-4 py-2 w-1/10 text-center">Action</th>
              </tr>
            </thead>
            <tbody>
              {filteredJobPosts.map((post) => (
                <tr key={post.id} className="border-b">
                  <td className="px-4 py-2 w-1/5">
                    {users.find((rec) => rec.id === post.employer.MaND)
                      ?.username || "N/A"}
                  </td>
                  <td className="px-4 py-2 w-1/5">{post.tieude}</td>
                  <td className="px-4 py-2 w-1/5">
                    {recruiters.find((rec) => rec.id === post.MaNTD)?.ten ||
                      "N/A"}
                  </td>
                  <td className="px-4 py-2 w-1/10 text-center">
                    {post.trangthai}
                  </td>
                  <td className="px-4 py-3 w-1/10">
                    <div className="flex justify-center gap-2">
                      <button
                        className="p-2 text-blue-600 hover:bg-blue-50 rounded"
                        onClick={() => xemChiTiet(post.id)}
                        title="Xem chi ti·∫øt"
                      >
                        <Eye className="h-5 w-5" />
                      </button>
                      <button
                        className="p-2 text-green-600 hover:bg-green-50 rounded"
                        onClick={() => handleSubmit(post.id)}
                        title="Duy·ªát tin"
                      >
                        <Check className="h-5 w-5" />
                      </button>
                      <button
                        className="p-2 text-orange-600 hover:bg-orange-50 rounded"
                        onClick={() => openRejectModal(post.id)}
                        title="T·ª´ ch·ªëi"
                      >
                        <X className="h-5 w-5" />
                      </button>
                      <button
                        className="p-2 text-red-600 hover:bg-red-50 rounded"
                        onClick={() => {
                          if (
                            window.confirm(
                              "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a tin tuy·ªÉn d·ª•ng n√†y?"
                            )
                          ) {
                            XoaTinTD(post.id);
                          }
                        }}
                        title="X√≥a tin"
                      >
                        <Trash2 className="h-5 w-5" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
      {rejectModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-96 max-w-full">
            <h3 className="text-lg font-semibold mb-4">
              T·ª´ ch·ªëi tin tuy·ªÉn d·ª•ng
            </h3>
            <textarea
              className="w-full h-32 p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Nh·∫≠p l√Ω do t·ª´ ch·ªëi..."
              value={rejectReason}
              onChange={(e) => setRejectReason(e.target.value)}
            />
            <div className="flex justify-end gap-2 mt-4">
              <button
                className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded"
                onClick={onClose}
              >
                H·ªßy
              </button>
              <button
                className="px-4 py-2 bg-orange-500 text-white hover:bg-orange-600 rounded"
                onClick={handleSubmittc}
              >
                X√°c nh·∫≠n
              </button>
            </div>
          </div>
        </div>
      )}
      {selectedPost && (
        <div className="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-1/3 max-h-[90vh] flex flex-col">
            <div className="overflow-y-auto flex-1">
              <p>{selectedPost.noibat ? "true" : "false"}</p>
              <h2 className="text-xl font-bold mb-4">{selectedPost.tieude}</h2>
              <p className="mb-4">
                <strong>Nh√† tuy·ªÉn d·ª•ng:</strong>{" "}
                {recruiters.find((rec) => rec.id === selectedPost.MaNTD)?.ten ||
                  "N/A"}
              </p>
              <div>
                <h1 className="text-2xl font-bold mb-4">
                  {selectedPost?.title || "Th√¥ng tin tuy·ªÉn d·ª•ng"}
                </h1>
                <div className="grid grid-cols-2 gap-4 bg-purple-50 p-4 rounded-lg">
                  <div>
                    <strong>Kinh nghi·ªám</strong>{" "}
                    {selectedPost?.kinhNghiem || "N/A"}
                  </div>
                  <div>
                    <strong>C·∫•p b·∫≠c : </strong>
                    {selectedPost?.levels?.length > 0
                      ? selectedPost.levels.map((level, index) => (
                          <span key={index}>
                            {level.ten || "N/A"}
                            {index < selectedPost.levels.length - 1 &&
                              ", "}{" "}
                          </span>
                        ))
                      : "N/A"}
                  </div>
                  <div>
                    <strong>Lo·∫°i h·ª£p ƒë·ªìng : </strong>{" "}
                    {selectedPost?.loaiHopdong || "N/A"}
                  </div>
                  <div>
                    <strong>K·ªπ nƒÉng : </strong>
                    {selectedPost?.skills?.length > 0
                      ? selectedPost.skills.map((skill, index) => (
                          <span key={index}>
                            {skill.ten || "N/A"}
                            {index < selectedPost.skills.length - 1 &&
                              ", "}{" "}
                          </span>
                        ))
                      : "N/A"}
                  </div>
                  <div>
                    <strong>ƒê·ªãa ch·ªâ:</strong>{" "}
                    {selectedPost?.diaChiLamviec || "N/A"}
                  </div>
                </div>
                <div className="mt-6">
                  <h2 className="text-2xl font-semibold text-gray-800 mb-4">
                    M√¥ t·∫£ c√¥ng vi·ªác
                  </h2>
                  <p
                    className="text-gray-700"
                    dangerouslySetInnerHTML={{
                      __html: selectedPost.mota || "Th√¥ng tin kh√¥ng c√≥ s·∫µn.",
                    }}
                  ></p>
                </div>
              </div>
            </div>
            <div className="mt-4 pt-4 border-t">
              <button
                className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
                onClick={closeModal}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
