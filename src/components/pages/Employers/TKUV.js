import React, { useState, useEffect, useCallback } from "react";
import axios from "../../services/axios";
import Select from "react-select";

const FILTERS = [
  {
    label: "Ng√†nh ngh·ªÅ",
    key: "nganhNghe",
    options: ["CNTT", "K·∫ø to√°n", "Marketing"],
  },
  {
    label: "Kinh nghi·ªám",
    key: "kinhNghiem",
    options: ["1 nƒÉm", "2-3 nƒÉm", "Tr√™n 3 nƒÉm"],
  },
  {
    label: "C·∫•p b·∫≠c",
    key: "capBac",
    options: ["Nh√¢n vi√™n", "Tr∆∞·ªüng nh√≥m", "Qu·∫£n l√Ω"],
  },
  {
    label: "H·ªçc v·∫•n",
    key: "hocVan",
    options: ["Cao ƒë·∫≥ng", "ƒê·∫°i h·ªçc", "Th·∫°c sƒ©"],
  },
  {
    label: "N∆°i l√†m vi·ªác",
    key: "noiLamViec",
    options: ["H√† N·ªôi", "ƒê√† N·∫µng", "TP.HCM"],
  },
  {
    label: "H√¨nh th·ª©c l√†m vi·ªác",
    key: "hinhThuc",
    options: ["To√†n th·ªùi gian", "B√°n th·ªùi gian", "Freelance"],
  },
  { label: "Gi·ªõi t√≠nh", key: "gioiTinh", options: ["Nam", "N·ªØ", "Kh√°c"] },
  {
    label: "T√¨nh tr·∫°ng h√¥n nh√¢n",
    key: "honNhan",
    options: ["ƒê·ªôc th√¢n", "ƒê√£ k·∫øt h√¥n"],
  },
];

const Filter = React.memo(({ filters, onFilterChange }) => (
  <div className="p-4 bg-gray-100">
    <h2 className="mb-2 text-lg font-semibold">B·ªô l·ªçc n√¢ng cao:</h2>
    {FILTERS.map((filter) => (
      <div key={filter.key} className="mb-4">
        <label className="block mb-1 text-sm">{filter.label}</label>
        <select
          className="w-full px-4 py-2 border rounded"
          onChange={(e) => onFilterChange(filter.key, e.target.value)}
        >
          <option value="">T·∫•t c·∫£ {filter.label.toLowerCase()}</option>
          {filter.options.map((option, index) => (
            <option key={index} value={option}>
              {option}
            </option>
          ))}
        </select>
      </div>
    ))}
  </div>
));

const SearchBar = ({ cities, selectedCity, onCityChange, onInputChange }) => (
  <div className="flex items-center gap-4 p-4 bg-white shadow">
    <input
      type="text"
      placeholder="T√¨m ki·∫øm"
      className="flex-grow px-4 py-2 border rounded"
    />
    <Select
      options={cities}
      value={selectedCity}
      onChange={onCityChange}
      onInputChange={onInputChange}
      placeholder="Ch·ªçn ho·∫∑c nh·∫≠p T·ªânh/Th√†nh ph·ªë"
      isClearable
      isSearchable
    />
    <button className="px-4 py-2 text-white bg-orange-500 rounded">
      T√¨m ki·∫øm
    </button>
  </div>
);

const HosoxemList = ({ hosoxem }) => (
  <div className="p-4">
    <h2 className="mb-4 text-lg font-semibold">
      K·∫øt qu·∫£ t√¨m th·∫•y: {hosoxem.length} h·ªì s∆°
    </h2>
    {hosoxem.map((hs) => (
      <div
        key={hs.id}
        className="p-4 mb-4 bg-white border rounded shadow-sm flex justify-between items-center"
      >
        <div>
          <h3 className="text-lg font-bold">{hs.hoVaTen}</h3>
          <p>{hs.tenhoso}</p>
          <p className="text-gray-500">{hs.trinhDoHocVan}</p>
          <p className="text-gray-500">{hs.kinhNghiemLamViec}</p>
        </div>
        <div className="text-right">
          <p className="text-gray-400">
            {new Date(hs.ngayCapNhat).toLocaleDateString()}
          </p>
          <button className="text-gray-500 hover:text-red-500">‚ù§Ô∏è</button>
          <button className="ml-4 text-gray-500 hover:text-blue-500">üëÅ</button>
        </div>
      </div>
    ))}
  </div>
);

function App() {
  const [selectedhosoxem, setSelectedhosoxem] = useState([]);
  const [filteredHosoxem, setFilteredHosoxem] = useState([]);
  const [cities, setCities] = useState([
    { value: "H√† N·ªôi", label: "H√† N·ªôi" },
    { value: "ƒê√† N·∫µng", label: "ƒê√† N·∫µng" },
    { value: "TP.HCM", label: "TP.HCM" },
  ]);
  const [selectedCity, setSelectedCity] = useState(null);
  const [filters, setFilters] = useState({});

  useEffect(() => {
    const fetchhoso = async () => {
      try {
        const response = await axios.get("/hoso");
        setSelectedhosoxem(response.data);
        setFilteredHosoxem(response.data);
      } catch (error) {
        console.error("Error fetching job seekers:", error);
      }
    };

    fetchhoso();
  }, []);

  const handleFilterChange = useCallback((key, value) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
  }, []);

  const handleCityChange = (selectedOption) => {
    setSelectedCity(selectedOption);
    if (selectedOption) {
      const filtered = selectedhosoxem.filter(
        (hs) => hs.nguoitimviec.thanhPho === selectedOption.value
      );
      setFilteredHosoxem(filtered);
    } else {
      setFilteredHosoxem(selectedhosoxem);
    }
  };

  const handleInputChange = (inputValue) => {
    if (inputValue && !cities.some((city) => city.value === inputValue)) {
      const newCity = { value: inputValue, label: inputValue };
      setCities((prev) => [...prev, newCity]);
    }
  };

  useEffect(() => {
    const filtered = selectedhosoxem.filter((hs) => {
      return Object.keys(filters).every((key) => {
        return filters[key] === "" || hs[key]?.toString() === filters[key];
      });
    });
    setFilteredHosoxem(filtered);
  }, [filters, selectedhosoxem]);

  return (
    <div className="flex">
      <aside className="w-1/4 bg-gray-100">
        <Filter filters={filters} onFilterChange={handleFilterChange} />
      </aside>
      <main className="w-3/4">
        <SearchBar
          cities={cities}
          selectedCity={selectedCity}
          onCityChange={handleCityChange}
          onInputChange={handleInputChange}
        />
        <HosoxemList hosoxem={filteredHosoxem} />
      </main>
    </div>
  );
}

export default App;
