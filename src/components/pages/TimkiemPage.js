import React, { useState } from "react";
import { useLocation } from "react-router-dom";
import axios from "../services/axios";
const SearchBar = () => {
  const [jobPosts, setJobPosts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const location = useLocation();
  const keyword = new URLSearchParams(location.search).get("keyword");
  useEffect(() => {
    const fetchJobPosts = async () => {
      setLoading(true);
      setError(null);

      try {
        const response = await axios.get(`/api/jobposts/search`, {
          params: { keyword },
        });
        setJobPosts(response.data);
      } catch (error) {
        setError("Error fetching job posts.");
      } finally {
        setLoading(false);
      }
    };

    if (keyword) {
      fetchJobPosts();
    }
  }, [keyword]);

  const sampleJobs = [
    {
      id: 1,
      title: "K·∫ø To√°n T·ªïng H·ª£p",
      company: "C√¥ng Ty TNHH M·ªôt Th√†nh Vi√™n D·ªãch V·ª• B·∫£o V·ªá S√†i G√≤n Long H·∫£i",
      salary: "Th·ªèa thu·∫≠n",
      location: "ƒê·ªìng Nai",
      timeLeft: "C√≤n 4 ng√†y",
      logo: "https://via.placeholder.com/50",
    },
    {
      id: 2,
      title: "L·∫≠p Tr√¨nh Vi√™n Frontend",
      company: "C√¥ng Ty C·ªï Ph·∫ßn C√¥ng Ngh·ªá ABC",
      salary: "20-25 tri·ªáu",
      location: "H·ªì Ch√≠ Minh",
      timeLeft: "C√≤n 2 ng√†y",
      logo: "https://via.placeholder.com/50",
    },
    {
      id: 3,
      title: "Nh√¢n Vi√™n IT H·ªó Tr·ª£",
      company: "C√¥ng Ty D·ªãch V·ª• H·ªó Tr·ª£ XYZ",
      salary: "10-15 tri·ªáu",
      location: "H√† N·ªôi",
      timeLeft: "C√≤n 1 tu·∫ßn",
      logo: "https://via.placeholder.com/50",
    },
  ];

  const [filteredJobs, setFilteredJobs] = useState(sampleJobs);

  // const handleSearch = (keyword) => {
  //   const filtered = sampleJobs.filter((job) =>
  //     job.title.toLowerCase().includes(keyword.toLowerCase())
  //   );
  //   setFilteredJobs(filtered);
  // };
  const [filters, setFilters] = useState({
    experience: "T·∫•t c·∫£ kinh nghi·ªám",
    salary: "T·∫•t c·∫£ m·ª©c l∆∞∆°ng",
    level: "T·∫•t c·∫£ c·∫•p b·∫≠c",
    degree: "T·∫•t c·∫£ tr√¨nh ƒë·ªô",
    type: "Lo·∫°i c√¥ng vi·ªác",
    gender: "T·∫•t c·∫£ gi·ªõi t√≠nh",
  });

  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi gi√° tr·ªã dropdown
  const handleFilterChange = (key, value) => {
    const updatedFilters = { ...filters, [key]: value };
    setFilters(updatedFilters);

    // L·ªçc d·ªØ li·ªáu theo filters
    const filtered = sampleJobs.filter((job) => {
      return (
        (updatedFilters.experience === "T·∫•t c·∫£ kinh nghi·ªám" ||
          job.experience === updatedFilters.experience) &&
        (updatedFilters.salary === "T·∫•t c·∫£ m·ª©c l∆∞∆°ng" ||
          job.salary === updatedFilters.salary) &&
        (updatedFilters.level === "T·∫•t c·∫£ c·∫•p b·∫≠c" ||
          job.level === updatedFilters.level) &&
        (updatedFilters.degree === "T·∫•t c·∫£ tr√¨nh ƒë·ªô" ||
          job.degree === updatedFilters.degree) &&
        (updatedFilters.type === "Lo·∫°i c√¥ng vi·ªác" ||
          job.type === updatedFilters.type) &&
        (updatedFilters.gender === "T·∫•t c·∫£ gi·ªõi t√≠nh" ||
          job.gender === updatedFilters.gender)
      );
    });

    setFilteredJobs(filtered);
  };
  return (
    <div>
      <div className="bg-purple-700 p-4 rounded-lg shadow-md">
        {/* Container hai h√†ng */}
        <div className="flex flex-col gap-2 w-full">
          {/* H√†ng 1: Thanh t√¨m ki·∫øm ch√≠nh */}
          <div className="flex items-center gap-2 h-16 bg-purple-700 w-full">
            {/* √î nh·∫≠p li·ªáu */}
            <div className="flex-grow relative">
              <input
                type="text"
                placeholder="k·∫ø to√°n"
                className="w-full h-full p-3 pl-10 text-sm text-gray-800 border rounded-lg outline-none focus:ring-2 focus:ring-blue-500"
              />
              <span className="absolute top-3 left-3 text-gray-400">üîç</span>
            </div>
            {/* Dropdown ngh·ªÅ nghi·ªáp */}
            <select className="h-full p-3 text-sm text-gray-600 border rounded-lg focus:ring-2 focus:ring-blue-500">
              <option>L·ªçc theo ngh·ªÅ nghi·ªáp</option>
              <option>K·∫ø to√°n</option>
              <option>K·ªπ s∆∞</option>
            </select>
            {/* Dropdown t·ªânh th√†nh */}
            <select className="h-full p-3 text-sm text-gray-600 border rounded-lg focus:ring-2 focus:ring-blue-500">
              <option>L·ªçc theo t·ªânh th√†nh</option>
              <option>H√† N·ªôi</option>
              <option>H·ªì Ch√≠ Minh</option>
            </select>
            {/* N√∫t t√¨m ki·∫øm */}
            <button className="h-full px-4 py-2 text-white bg-blue-500 rounded-lg hover:bg-blue-600">
              T√¨m ki·∫øm
            </button>
            {/* N√∫t l·ªçc n√¢ng cao */}
            <button className="h-full px-4 py-2 text-white bg-purple-500 rounded-lg hover:bg-purple-600">
              L·ªçc n√¢ng cao
            </button>
          </div>
        </div>
      </div>

      <div className="flex items-center gap-2 h-16 bg-white p-2 rounded-lg shadow-md w-full">
        {/* Dropdown c√°c t√πy ch·ªçn */}
        {[
          {
            key: "experience",
            label: "T·∫•t c·∫£ kinh nghi·ªám",
            options: ["0-1 nƒÉm", "1-2 nƒÉm", "3-5 nƒÉm"],
          },
          {
            key: "salary",
            label: "T·∫•t c·∫£ m·ª©c l∆∞∆°ng",
            options: ["Th·ªèa thu·∫≠n", "10-15 tri·ªáu", "20-25 tri·ªáu"],
          },
          {
            key: "level",
            label: "T·∫•t c·∫£ c·∫•p b·∫≠c",
            options: ["Nh√¢n vi√™n", "Chuy√™n vi√™n"],
          },
          {
            key: "degree",
            label: "T·∫•t c·∫£ tr√¨nh ƒë·ªô",
            options: ["Trung c·∫•p", "Cao ƒë·∫≥ng", "ƒê·∫°i h·ªçc"],
          },
          {
            key: "type",
            label: "Lo·∫°i c√¥ng vi·ªác",
            options: ["Full-time", "Part-time"],
          },
          {
            key: "gender",
            label: "T·∫•t c·∫£ gi·ªõi t√≠nh",
            options: ["Nam", "N·ªØ", "Kh√¥ng y√™u c·∫ßu"],
          },
        ].map((dropdown, index) => (
          <select
            key={index}
            className="flex-grow h-full p-2 text-sm border rounded-lg text-gray-600 focus:ring-2 focus:ring-blue-500"
            value={filters[dropdown.key]}
            onChange={(e) => handleFilterChange(dropdown.key, e.target.value)}
          >
            <option>{dropdown.label}</option>
            {dropdown.options.map((option, i) => (
              <option key={i}>{option}</option>
            ))}
          </select>
        ))}
        {/* N√∫t xo√° ch·ªçn */}
        <button className="h-full text-sm text-blue-500 hover:underline">
          Xo√° ch·ªçn
        </button>
        {/* N√∫t ƒë√≥ng */}
        <button className="h-full text-sm text-gray-500 hover:underline">
          ƒê√≥ng
        </button>
      </div>
      <div className="space-y-4">
        {filteredJobs.map((job) => (
          <div className="flex items-start justify-between p-4 bg-white border rounded-lg shadow-md hover:shadow-lg">
            {/* N·ªôi dung b√™n tr√°i */}
            <div className="flex items-start gap-4">
              {/* Logo ho·∫∑c tag */}
              <div className="flex-shrink-0">
                <img
                  src={job.logo}
                  alt="Company Logo"
                  className="w-12 h-12 rounded-full"
                />
              </div>
              {/* N·ªôi dung th√¥ng tin c√¥ng vi·ªác */}
              <div>
                {/* Ti√™u ƒë·ªÅ c√¥ng vi·ªác */}
                <h2 className="text-lg font-semibold text-gray-800">
                  {job.title}
                </h2>
                {/* T√™n c√¥ng ty */}
                <p className="text-sm text-gray-500">{job.company}</p>
                {/* Th√¥ng tin th√™m */}
                <div className="flex items-center gap-4 mt-2 text-sm text-gray-600">
                  <p className="flex items-center gap-1">üí≤ {job.salary}</p>
                  <p className="flex items-center gap-1">üìç {job.location}</p>
                </div>
              </div>
            </div>

            {/* N·ªôi dung b√™n ph·∫£i */}
            <div className="flex flex-col items-end">
              {/* Icon y√™u th√≠ch */}
              <button className="text-blue-500 hover:text-blue-700">‚ù§Ô∏è</button>
              {/* Th·ªùi gian c√≤n l·∫°i */}
              <p className="mt-auto text-sm text-gray-400">‚è≥ {job.timeLeft}</p>
            </div>
          </div>
        ))}
        {filteredJobs.length === 0 && (
          <p className="text-gray-500 text-center">Kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p.</p>
        )}
      </div>
    </div>
  );
};

export default SearchBar;
